/* Header file for opcodes.c, implementing the gameboy's opcodes
  Author: Max Croucher
  Email: mpccroucher@gmail.com
  May 2025
*/

#ifndef OPCODES_H
#define OPCODES_H

void queue_instruction(void);
void load_interrupt_instructions(uint8_t isr);

static void machine_nop(void);
static void machine_idle(void);
static void machine_consume_prefix();
static void machine_load_r8_r8(void);
static void machine_load_Z_imm8(void);
static void machine_load_W_imm8(void);
static void machine_load_r8_Z(void);
static void machine_load_Z_r8(void);
static void machine_load_Z_r16(void);
static void machine_load_r16_Z(void);
static void machine_load_dec_Z_r16(void);
static void machine_load_inc_Z_r16(void);
static void machine_load_dec_r16_r8(void);
static void machine_load_inc_r16_r8(void);
static void machine_load_hl_Z_dec(void);
static void machine_load_hl_Z_inc(void);
static void machine_load_addr_r8(void);
static void machine_load_Z_addr(void);
static void machine_load_addr_Z(void);
static void machine_load_addr_low_imm8(void);
static void machine_load_addr_high_imm8(void);
static void machine_load_r16_WZ(void);
static void machine_load_addr_r16_high(void);
static void machine_load_addr_r16_low_inc(void);
static void machine_load_sp_hl(void);
static void machine_push_r16_high_dec_sp(void);
static void machine_push_r16_low_set_r16_WZ(void);
static void machine_push_r16_low(void);
static void machine_interrupt_push_r16_high_dec_sp(void);
static void machine_pop_Z_inc_sp(void);
static void machine_pop_W_inc_sp(void);
static void machine_inc_r8(void);
static void machine_inc_r16(void);
static void machine_dec_sp(void);
static void machine_dec_sp_inc_pc(void);
static void machine_dec_r8(void);
static void machine_dec_r16(void);
static void machine_add_l_spl_Z(void);
static void machine_add_h_sph_Z(void);
static void machine_add_Z_spl_Z(void);
static void machine_add_W_sph_c(void);
static void machine_add_l_r16l(void);
static void machine_add_h_r16h(void);
static void machine_add_Z(void);
static void machine_sub_Z(void);
static void machine_cmp_Z(void);
static void machine_and_Z(void);
static void machine_or_Z(void);
static void machine_xor_Z(void);
static void machine_ccf(void);
static void machine_scf(void);
static void machine_daa(void);
static void machine_cpl(void);
static void machine_rlc_r8(void);
static void machine_rlc_r16_Z(void);
static void machine_rrc_r8(void);
static void machine_rrc_r16_Z(void);
static void machine_rl_r8(void);
static void machine_rl_r16_Z(void);
static void machine_rr_r8(void);
static void machine_rr_r16_Z(void);
static void machine_sla_r8(void);
static void machine_sla_r16_Z(void);
static void machine_sra_r8(void);
static void machine_sra_r16_Z(void);
static void machine_swap_r8(void);
static void machine_swap_r16_Z(void);
static void machine_srl_r8(void);
static void machine_srl_r16_Z(void);
static void machine_bit_W_r8(void);
static void machine_bit_W_Z(void);
static void machine_res_W_r8(void);
static void machine_res_r16_W_Z(void);
static void machine_set_W_r8(void);
static void machine_set_r16_W_Z(void);
static void machine_add_WZ_r16_Z_1(void);
static void machine_ime_enable(void);
static void machine_ime_enable_late(void);
static void machine_ime_disable(void);
static void machine_stop(void);
static void machine_halt(void);
static void machine_set_pc_addr(void);

static void instr_nop(void);
static void instr_invalid(void);
static void instr_ld_r8_r8(void);
static void instr_ld_r8_imm8(void);
static void instr_ld_r8_hl(void);
static void instr_ld_hl_r8(void);
static void instr_ld_hl_imm8(void);
static void instr_ld_A_r16(void);
static void instr_ld_r16_A(void);
static void instr_ld_a_imm16(void);
static void instr_ld_imm16_a(void);
static void instr_ldh_a_c(void);
static void instr_ldh_c_a(void);
static void instr_ldh_a_imm8(void);
static void instr_ldh_imm8_a(void);
static void instr_ld_a_hl_minus(void);
static void instr_ld_hl_a_minus(void);
static void instr_ld_a_hl_plus(void);
static void instr_ld_hl_a_plus(void);
static void instr_ld_r16_imm16(void);
static void instr_ld_imm16_sp(void);
static void instr_ld_sp_hl(void);
static void instr_push_r16(void);
static void instr_pop_r16(void);
static void instr_ld_hl_sp_e(void);
static void instr_add_a_r8(void);
static void instr_add_a_hl(void);
static void instr_add_a_imm8(void);
static void instr_adc_a_r8(void);
static void instr_adc_a_hl(void);
static void instr_adc_a_imm8(void);
static void instr_sub_a_r8(void);
static void instr_sub_a_hl(void);
static void instr_sub_a_imm8(void);
static void instr_sbc_a_r8(void);
static void instr_sbc_a_hl(void);
static void instr_sbc_a_imm8(void);
static void instr_cmp_a_r8(void);
static void instr_cmp_a_hl(void);
static void instr_cmp_a_imm8(void);
static void instr_inc_r8(void);
static void instr_inc_hl(void);
static void instr_dec_r8(void);
static void instr_dec_hl(void);
static void instr_and_a_r8(void);
static void instr_and_a_hl(void);
static void instr_and_a_imm8(void);
static void instr_or_a_r8(void);
static void instr_or_a_hl(void);
static void instr_or_a_imm8(void);
static void instr_xor_a_r8(void);
static void instr_xor_a_hl(void);
static void instr_xor_a_imm8(void);
static void instr_ccf(void);
static void instr_scf(void);
static void instr_daa(void);
static void instr_cpl(void);
static void instr_inc_r16(void);
static void instr_dec_r16(void);
static void instr_add_hl_r16(void);
static void instr_add_sp_r8(void);
static void instr_rlca(void);
static void instr_rrca(void);
static void instr_rla(void);
static void instr_rra(void);
static void instr_rlc_r8(void);
static void instr_rlc_hl(void);
static void instr_rrc_r8(void);
static void instr_rrc_hl(void);
static void instr_rl_r8(void);
static void instr_rl_hl(void);
static void instr_rr_r8(void);
static void instr_rr_hl(void);
static void instr_sla_r8(void);
static void instr_sla_hl(void);
static void instr_sra_r8(void);
static void instr_sra_hl(void);
static void instr_swap_r8(void);
static void instr_swap_hl(void);
static void instr_srl_r8(void);
static void instr_srl_hl(void);
static void instr_bit_r8(void);
static void instr_bit_hl(void);
static void instr_res_r8(void);
static void instr_res_hl(void);
static void instr_set_r8(void);
static void instr_set_hl(void);
static void instr_jp_imm16(void);
static void instr_jp_hl(void);
static void instr_jp_cc_imm16(void);
static void instr_jr_imm8(void);
static void instr_jr_cc_imm8(void);
static void instr_call_imm16(void);
static void instr_call_cc_imm16(void);
static void instr_ret(void);
static void instr_ret_cc(void);
static void instr_reti(void);
static void instr_rst(void);
static void instr_ei(void);
static void instr_di(void);
static void instr_stop(void);
static void instr_halt(void);

#endif // OPCODES_H